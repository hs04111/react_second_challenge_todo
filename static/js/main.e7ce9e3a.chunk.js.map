{"version":3,"sources":["atoms.tsx","Components/createCategory.tsx","Components/CreateToDo.tsx","Components/ToDo.tsx","Components/ToDoList.tsx","App.tsx","index.tsx","theme.tsx"],"names":["Categories","customCategoriesState","atom","key","default","JSON","parse","localStorage","getItem","categoryState","TO_DO","toDosState","toDoSelector","selector","get","toDos","category","filter","toDo","CustomForm","styled","form","props","theme","textColor","CreateCategory","useForm","register","handleSubmit","setValue","errors","formState","useRecoilState","customCategories","setCustomCategories","setCategory","useSetRecoilState","useEffect","setItem","stringify","onSubmit","customCategory","oldCategories","required","placeholder","type","message","CreateToDo","setToDos","useRecoilValue","oldToDos","text","id","Date","now","ToDoLi","li","ToDoText","span","CategoriesBtn","div","DeleteBtn","button","ToDo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","DOING","DONE","map","idx","Number","Container","bgColor","Title","h1","Subtitle","h2","ToDoList","rawToDos","value","onInput","GlobalStyle","createGlobalStyle","App","queryClient","QueryClient","ReactDOM","render","StrictMode","accentColor","cardBgColor","client","document","getElementById"],"mappings":"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","file":"static/js/main.e7ce9e3a.chunk.js","sourcesContent":["import { atom, selector } from 'recoil';\n\nconst TODO_KEY = 'toDos';\nconst CATEGORIES_KEY = 'additional_categories';\n\nexport enum Categories {\n  'TO_DO' = 'TO_DO',\n  'DOING' = 'DOING',\n  'DONE' = 'DONE',\n}\n\nexport interface IToDo {\n  text: string;\n  id: number;\n  category: Categories;\n}\n\nexport const customCategoriesState = atom<string[]>({\n  key: 'customCategories',\n  default: JSON.parse(localStorage.getItem(CATEGORIES_KEY) || '[]'),\n});\n\nexport const categoryState = atom<Categories>({\n  key: 'category',\n  default: Categories.TO_DO,\n});\n\nexport const toDosState = atom<IToDo[]>({\n  key: 'toDoList',\n  default: JSON.parse(localStorage.getItem(TODO_KEY) || '[]'),\n});\n\nexport const toDoSelector = selector({\n  key: 'toDoSelector',\n  get: ({ get }) => {\n    const toDos = get(toDosState);\n    const category = get(categoryState);\n    return toDos.filter((toDo) => toDo.category === category);\n  },\n});\n","import { useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useRecoilState, useSetRecoilState } from 'recoil';\nimport styled from 'styled-components';\nimport { categoryState, customCategoriesState } from '../atoms';\n\nconst CATEGORIES_KEY = 'additional_categories';\n\ninterface IForm {\n  customCategory: string;\n}\n\nexport const CustomForm = styled.form`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  input {\n    margin-top: 15px;\n    width: 60%;\n    background: transparent;\n    color: ${(props) => props.theme.textColor};\n    font-size: 20px;\n    border: none;\n    text-align: center;\n  }\n  button {\n    margin-top: 15px;\n    background: transparent;\n    color: ${(props) => props.theme.textColor};\n    font-size: 20px;\n    border: 3px solid ${(props) => props.theme.textColor};\n    border-radius: 5px;\n  }\n  span {\n    margin-top: 8px;\n  }\n`;\n\nfunction CreateCategory() {\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<IForm>();\n  const [customCategories, setCustomCategories] = useRecoilState(\n    customCategoriesState,\n  );\n  const setCategory = useSetRecoilState(categoryState);\n\n  const handleValid = ({ customCategory }: IForm) => {\n    setValue('customCategory', '');\n    setCategory(customCategory as any);\n    setCustomCategories((oldCategories) => {\n      return [...oldCategories, customCategory];\n    });\n  };\n\n  useEffect(() => {\n    localStorage.setItem(CATEGORIES_KEY, JSON.stringify(customCategories));\n  }, [customCategories]);\n\n  return (\n    <CustomForm onSubmit={handleSubmit(handleValid)}>\n      <input\n        {...register('customCategory', {\n          required: '카테고리를 입력 후 생성을 클릭하세요.',\n        })}\n        placeholder=\"여기에 새 카테고리를 쓰세요\"\n        type=\"text\"\n      />\n      <button>생성</button>\n      <span>{errors.customCategory?.message}</span>\n    </CustomForm>\n  );\n}\n\nexport default CreateCategory;\n","import { useForm } from 'react-hook-form';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { categoryState, toDosState } from '../atoms';\nimport { CustomForm } from './createCategory';\n\ninterface IForm {\n  toDo: string;\n}\n\nfunction CreateToDo() {\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<IForm>();\n  const setToDos = useSetRecoilState(toDosState);\n  const category = useRecoilValue(categoryState);\n\n  const handleValid = ({ toDo }: IForm) => {\n    setValue('toDo', '');\n    setToDos((oldToDos) => [\n      { text: toDo, id: Date.now(), category },\n      ...oldToDos,\n    ]);\n  };\n\n  return (\n    <CustomForm onSubmit={handleSubmit(handleValid)}>\n      <input\n        {...register('toDo', {\n          required: 'To do를 입력 후 등록을 클릭하세요.',\n        })}\n        placeholder=\"오늘의 To do는?\"\n        type=\"text\"\n      />\n      <button>등록</button>\n      <span>{errors.toDo?.message}</span>\n    </CustomForm>\n  );\n}\n\nexport default CreateToDo;\n","import React from 'react';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport styled from 'styled-components';\nimport { Categories, customCategoriesState, IToDo, toDosState } from '../atoms';\n\nconst ToDoLi = styled.li`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  align-items: center;\n  margin-bottom: 8px;\n  border: 2px solid ${(props) => props.theme.textColor};\n  border-radius: 5px;\n  padding: 10px;\n`;\n\nconst ToDoText = styled.span`\n  font-size: 20px;\n  font-weight: bold;\n  text-align: center;\n  margin: 20px auto;\n`;\n\nconst CategoriesBtn = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  div {\n    width: 100%;\n    display: flex;\n    justify-content: center;\n  }\n  button {\n    margin: 0 5px;\n    margin-top: 10px;\n    background: transparent;\n    color: ${(props) => props.theme.textColor};\n    font-size: 16px;\n    border: 1px solid ${(props) => props.theme.textColor};\n    border-radius: 5px;\n  }\n`;\n\nconst DeleteBtn = styled.button`\n  margin-top: 25px;\n  background: transparent;\n  color: ${(props) => props.theme.textColor};\n  font-size: 20px;\n  border: 3px solid ${(props) => props.theme.textColor};\n  border-radius: 5px;\n`;\n\nfunction ToDo({ text, category, id }: IToDo) {\n  const setToDos = useSetRecoilState(toDosState);\n  const customCategories = useRecoilValue(customCategoriesState);\n\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const {\n      currentTarget: { name },\n    } = event;\n\n    setToDos((oldToDos) => {\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n      const newToDo = {\n        text,\n        id,\n        category: name as any,\n      };\n      return [\n        ...oldToDos.slice(0, targetIndex),\n        newToDo,\n        ...oldToDos.slice(targetIndex + 1),\n      ];\n    });\n  };\n\n  const onDeleteClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setToDos((oldToDos) => {\n      return oldToDos.filter(\n        (toDo) => toDo.id !== Number(event.currentTarget.id),\n      );\n    });\n  };\n\n  return (\n    <ToDoLi>\n      <ToDoText>{text}</ToDoText>\n      <CategoriesBtn>\n        <span>카테고리 이동:</span>\n        <div>\n          {category !== Categories.TO_DO && (\n            <button name={Categories.TO_DO} onClick={onClick}>\n              To Do\n            </button>\n          )}\n          {category !== Categories.DOING && (\n            <button name={Categories.DOING} onClick={onClick}>\n              Doing\n            </button>\n          )}\n          {category !== Categories.DONE && (\n            <button name={Categories.DONE} onClick={onClick}>\n              Done\n            </button>\n          )}\n          {customCategories !== [] &&\n            customCategories.map((customCategory, idx) => {\n              if (customCategory !== category) {\n                return (\n                  <button name={customCategory} onClick={onClick} key={idx}>\n                    {customCategory}\n                  </button>\n                );\n              }\n            })}\n        </div>\n      </CategoriesBtn>\n      <DeleteBtn onClick={onDeleteClick} id={`${id}`}>\n        To do 지우기\n      </DeleteBtn>\n    </ToDoLi>\n  );\n}\n\nexport default ToDo;\n","import React, { useEffect } from 'react';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\nimport {\n  Categories,\n  categoryState,\n  customCategoriesState,\n  toDoSelector,\n  toDosState,\n} from '../atoms';\nimport CreateCategory from './createCategory';\nimport CreateToDo from './CreateToDo';\nimport ToDo from './ToDo';\n\nconst TODO_KEY = 'toDos';\n\nconst Container = styled.div`\n  max-width: 500px;\n  margin: 0 auto;\n  margin-top: 30px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  select {\n    margin-top: 15px;\n    width: 30%;\n    background: transparent;\n    color: ${(props) => props.theme.textColor};\n    font-size: 20px;\n    border: 2px solid ${(props) => props.theme.textColor};\n    border-radius: 5px;\n    option {\n      background-color: ${(props) => props.theme.bgColor};\n    }\n  }\n  ul {\n    width: 100%;\n    margin-top: 30px;\n  }\n  footer {\n    position: fixed;\n    bottom: 10px;\n    right: 3%;\n  }\n`;\n\nconst Title = styled.h1`\n  width: 100%;\n  font-size: 40px;\n  font-weight: bold;\n  text-align: center;\n  margin-top: 20px;\n  padding: 14px;\n  border: 1px solid ${(props) => props.theme.textColor};\n  border-radius: 10px;\n`;\n\nconst Subtitle = styled.h2`\n  font-size: 20px;\n  font-weight: bold;\n  text-align: center;\n  margin-top: 50px;\n`;\n\nfunction ToDoList() {\n  const rawToDos = useRecoilValue(toDosState);\n  const toDos = useRecoilValue(toDoSelector);\n  const [category, setCategory] = useRecoilState(categoryState);\n  const customCategories = useRecoilValue(customCategoriesState);\n\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    setCategory(event.currentTarget.value as any);\n  };\n\n  useEffect(() => {\n    localStorage.setItem(TODO_KEY, JSON.stringify(rawToDos));\n  }, [rawToDos]);\n\n  return (\n    <Container>\n      <Title>오늘의 To Do</Title>\n      <Subtitle>카테고리를 아래에서 선택하세요</Subtitle>\n      <select value={category} onInput={onInput}>\n        <option value={Categories.TO_DO}>To Do</option>\n        <option value={Categories.DOING}>Doing</option>\n        <option value={Categories.DONE}>Done</option>\n        {customCategories !== [] &&\n          customCategories.map((customCategory, idx) => (\n            <option value={customCategory} key={idx}>\n              {customCategory}\n            </option>\n          ))}\n      </select>\n      <Subtitle>새 카테고리를 생성할 수 있습니다</Subtitle>\n      <CreateCategory />\n      <Subtitle>To do를 입력하세요</Subtitle>\n      <CreateToDo />\n      <ul>\n        {toDos.map((toDo) => (\n          <ToDo key={toDo.id} {...toDo} />\n        ))}\n      </ul>\n      <footer>Blueschist, NomadCoders</footer>\n    </Container>\n  );\n}\n\nexport default ToDoList;\n","import React, { useState } from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport ToDoList from './Components/ToDoList';\n\nconst GlobalStyle = createGlobalStyle`\n\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\nbody {\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: ${(props) => props.theme.bgColor};\n  color:  ${(props) => props.theme.textColor};\n}\na {\n  text-decoration: none;\n  color: inherit;\n}\n* {\n  box-sizing: border-box;\n}\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { RecoilRoot } from 'recoil';\nimport { ThemeProvider } from 'styled-components';\n\nimport App from './App';\nimport { darkTheme } from './theme';\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <QueryClientProvider client={queryClient}>\n          <App />\n        </QueryClientProvider>\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","import { DefaultTheme } from 'styled-components';\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: '#28284C',\n  textColor: 'white',\n  accentColor: '#9c88ff',\n  cardBgColor: 'transparent',\n};\n"],"sourceRoot":""}